# GraphQL schema example
#
# https://gqlgen.com/getting-started/


#Mutation Schema
type Mutation {

  #POST
  createUser(input: NewUser!): User!
  RemoveUser(input: DeleteUser!): Boolean!
  #CreateNewPart(input: NewPart!): Part!
}

#Query Schema
type Query {
  todos: [Todo!]!
  users: [User!]!
  parts_db: Parts_DB!
  motherboard: [Motherboard!]!
  cpus: [CPU!]!
  storages: [Storage!]!
  memories: [Memory!]!
  power_supplies: [PowerSupply!]!
  graphics_cards: [GraphicsCard!]!
  cases: [Case!]!
  monitors: [Monitor!]!
  operating_systems: [OperatingSystem!]!
}


#Object Schemas
type Todo {
  id: ID!
  text: String!
  done: Boolean!
  user: User!
}

type User {
  id: ID!
  username: String!
  password: String!
  email: String!
  pcs: [PC!]
}

type PC {
  name: String!
  id: ID!
  motherboard: Motherboard!
  cpu: CPU!
  ram: Memory!
  storage: Storage!
  powersupply: PowerSupply!
  graphic_card: GraphicsCard!
  case: Case!
  monitor: Monitor!
  operating_system: OperatingSystem!
  cost: Float!

}


type Parts_DB {
  motherboards: [Motherboard!]
  cpus: [CPU!]
  rams: [Memory!]
  storages: [Storage!]
  powersupplies: [PowerSupply!]
  graphic_cards: [GraphicsCard!]
  cases: [Case!]
  monitors: [Monitor!]
  operating_systems: [OperatingSystem!]

}

type Part {
  name: String!
  id: ID!
  company: String!
  price: Float!
}

type Motherboard  {
  name: String!
  id: ID!
  company: String
  form_factor: String!
  sockets: Int!
  chipsets: Int!
  pci_slots: Int!
  ram_slots: Int!
  internal_ports: Int!
  external_ports: Int!
  price: Float!
  users: [User!]
}

type CPU {
  name: String!
  id: ID!
  company: String
  cores: Int!
  clockspeed: String!
  sockets: Int!
  price: Float!
  users: [User!]
}

type Storage {
  name: String!
  id: ID!
  company: String
  format: String!
  capacity: String!
  speed: String!
  price: Float!
  users: [User!]
}

type Memory {
  name: String!
  id: ID!
  company: String
  frequency: String!
  cas_latency: String!
  memory_channels: String!
  price: Float!
  users: [User!]
}

type PowerSupply {
  name: String!
  id: ID!
  company: String
  form_factor: String!
  modularity: String!
  price: Float!
  users: [User!]
}

type GraphicsCard {
  name: String!
  id: ID!
  company: String
  gpu: String!
  memory: Int!
  core_clock: String!
  price: Float!
  users: [User!]
}

type Case {
  name: String!
  id: ID!
  company: String
  windowed: Boolean
  material: String!
  price: Float!
  users: [User!]
}

type Monitor {
  name: String!
  id: ID!
  company: String
  resolution: String!
  hz: Int!
  price: Float!
  users: [User!]
}

type OperatingSystem {
  name: String!
  id: ID!
  company: String
  price: Int!
  users: [User!]
}

#Inputs
input NewTodo {
  text: String!
  userId: String!
}

input NewUser {
  username: String!
  password: String!
  email: String!
}

#input NewPart {

 # new_motherboard: Motherboard!
  #new_cpu: CPU!
#  new_ram: Memory!
#  new_storage: Storage!
#  new_powersupplie: PowerSupply!
#  new_graphic_card: GraphicsCard!
#  new_case: Case!
#  new_monitor: Monitor!
#  new_operating_system: OperatingSystem!

#}

input DeleteUser {
  id: ID!
}







